
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__com_example_Demo_adaptor_h__adaptor__H__
#define __sdbuscpp__com_example_Demo_adaptor_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace com {
namespace example {

class Demo_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "com.example.Demo";

protected:
    Demo_adaptor(sdbus::IObject& object)
        : object_(&object)
    {
        object_->registerMethod("Echo").onInterface(INTERFACE_NAME).withInputParamNames("msg").withOutputParamNames("reply").implementedAs([this](const std::string& msg){ return this->Echo(msg); });
        object_->registerSignal("Tick").onInterface(INTERFACE_NAME).withParameters<int32_t>("value");
        object_->registerProperty("Counter").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Counter(); });
    }

    Demo_adaptor(const Demo_adaptor&) = delete;
    Demo_adaptor& operator=(const Demo_adaptor&) = delete;
    Demo_adaptor(Demo_adaptor&&) = default;
    Demo_adaptor& operator=(Demo_adaptor&&) = default;

    ~Demo_adaptor() = default;

public:
    void emitTick(const int32_t& value)
    {
        object_->emitSignal("Tick").onInterface(INTERFACE_NAME).withArguments(value);
    }

private:
    virtual std::string Echo(const std::string& msg) = 0;

private:
    virtual int32_t Counter() = 0;

private:
    sdbus::IObject* object_;
};

}} // namespaces

#endif
