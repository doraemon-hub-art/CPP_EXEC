
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__com_example_Demo_proxy_h__proxy__H__
#define __sdbuscpp__com_example_Demo_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace com {
namespace example {

class Demo_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "com.example.Demo";

protected:
    Demo_proxy(sdbus::IProxy& proxy)
        : proxy_(&proxy)
    {
        proxy_->uponSignal("Tick").onInterface(INTERFACE_NAME).call([this](const int32_t& value){ this->onTick(value); });
    }

    Demo_proxy(const Demo_proxy&) = delete;
    Demo_proxy& operator=(const Demo_proxy&) = delete;
    Demo_proxy(Demo_proxy&&) = default;
    Demo_proxy& operator=(Demo_proxy&&) = default;

    ~Demo_proxy() = default;

    virtual void onTick(const int32_t& value) = 0;

public:
    std::string Echo(const std::string& msg)
    {
        std::string result;
        proxy_->callMethod("Echo").onInterface(INTERFACE_NAME).withArguments(msg).storeResultsTo(result);
        return result;
    }

public:
    int32_t Counter()
    {
        return proxy_->getProperty("Counter").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy* proxy_;
};

}} // namespaces

#endif
